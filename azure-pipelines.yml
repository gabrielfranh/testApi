trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  IMAGE_NAME: 'gabrielfranh/testapi'  # Nome do repositório Docker Hub
  IMAGE_TAG: '$(Build.BuildId)'       # Tag da imagem Docker

steps:
# Build and Push Docker Image
- task: Docker@2
  inputs:
    containerRegistry: 'DockerHubConnection'  # Nome da conexão Docker Hub
    repository: '$(IMAGE_NAME)'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'                # Caminho para seu Dockerfile
    tags: '$(IMAGE_TAG)'

# Install envsubst
- script: |
    sudo apt-get update
    sudo apt-get install -y gettext
  displayName: 'Install envsubst'

# Configure AWS CLI
- script: |
    aws configure set aws_access_key_id $(awsAccessKeyId)
    aws configure set aws_secret_access_key $(awsSecretAccessKey)
    aws configure set region us-east-1
  displayName: 'Configure AWS CLI'
  env:
    AWS_ACCESS_KEY_ID: $(awsAccessKeyId)
    AWS_SECRET_ACCESS_KEY: $(awsSecretAccessKey)

# Download the Kubeconfig
- task: DownloadSecureFile@1
  name: downloadKubeConfig
  inputs:
    secureFile: 'kubeconfig-eks'

# Apply or Update Kubernetes Deployment and Service with Variable Substitution
- script: |
    export AWS_ACCESS_KEY_ID=$(awsAccessKeyId)
    export AWS_SECRET_ACCESS_KEY=$(awsSecretAccessKey)
    export AWS_DEFAULT_REGION=us-east-1
    export KUBECONFIG=$(downloadKubeConfig.secureFilePath)

    export IMAGE_NAME=$(IMAGE_NAME)
    export IMAGE_TAG=$(IMAGE_TAG)

    # Substitute the IMAGE_TAG in deployment.yaml
    envsubst < $(System.DefaultWorkingDirectory)/testapi-dp.yaml > $(System.DefaultWorkingDirectory)/deployment-subst.yaml

    # Apply the service manifest to ensure it is up-to-date
    kubectl apply -f $(System.DefaultWorkingDirectory)/testapi-svc.yaml

    # Check if the deployment exists and update or apply it
    if kubectl get deployment testapi-dp > /dev/null 2>&1; then
        # Update the existing deployment with the new image
        kubectl set image deployment/testapi-dp testapi-container=$(IMAGE_NAME):$(IMAGE_TAG)
    else
        # Apply the deployment manifest if it doesn't exist
        kubectl apply -f $(System.DefaultWorkingDirectory)/deployment-subst.yaml
    fi
  displayName: 'Create or Update Kubernetes Deployment and Service'